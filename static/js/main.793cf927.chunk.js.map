{"version":3,"sources":["components/styles/customStyles.tsx","components/RulesButton.tsx","components/NavBar.tsx","components/Node.tsx","helperFunctions/updatedCellGrid.tsx","components/Game.tsx","components/mapkeys/Spaceship.tsx","components/mapkeys/Oscillators.tsx","components/mapkeys/StillLives.tsx","components/Map.tsx","helperFunctions/liveNeighborCount.tsx","helperFunctions/game.tsx","helperFunctions/createGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["customStyles","content","top","left","right","bottom","marginRight","transform","background","borderRadius","RulesButton","useState","modalIsOpen","setIsOpen","handleClose","e","stopPropagation","className","onClick","isOpen","onRequestClose","style","contentLabel","NavBar","isRunning","speed","handleRunning","handleClearGrid","handleSlider","src","alt","onChange","value","step","type","min","max","href","Node","row","column","isCell","handleOnClick","onMouseDown","onMouseUp","onMouseEnter","id","data-testid","updatedCellGrid","grid","currentNode","newGrid","i","length","push","Game","setGrid","MouseIsClicked","setMouseIsClicked","board","map","rowIndex","node","nodeIndex","Spaceship","Oscillators","StillLives","Modal","setAppElement","Map","liveNeighborCount","count","direction","rowIdx","colIdx","game","newRows","j","neigh","c","createGrid","maxRow","maxColumn","currentRow","nodeSchema","cols","Math","floor","window","innerWidth","rows","innerHeight","App","setRunning","setSpeed","runningRef","useRef","current","speedRef","handleGame","useCallback","prevGrid","setTimeout","parseInt","useEffect","prevValue","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAAaA,EAAe,CAC1BC,QAAS,CACPC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,wBACXC,WAAY,8CACZC,aAAc,SCmDHC,G,MAvDe,WAAO,IAAD,EACDC,oBAAkB,GADjB,mBAC3BC,EAD2B,KACdC,EADc,KAG5BC,EAAc,SAACC,GACnBA,EAAEC,kBACFH,GAAU,IAGZ,OACE,sBAAKI,UAAU,QAAQC,QAAS,kBAAML,GAAU,IAAhD,UACE,qBAAKI,UAAU,YAAf,SACE,8CAEF,cAAC,IAAD,CACEE,OAAQP,EACRQ,eAAgBN,EAChBO,MAAOrB,EACPsB,aAAa,gBAJf,SAME,sBAAKL,UAAU,cAAf,UACE,sBAAKA,UAAU,SAAf,UACE,6CACA,8BACE,wBAAQC,QAASJ,EAAjB,oBAGJ,sBAAKG,UAAU,aAAf,UACE,sCACA,wKAGW,4CAHX,KAG+B,4CAH/B,MAGqD,IACnD,2CAJF,UAOF,sBAAKA,UAAU,aAAf,UACE,uCACA,+BACE,2FACA,+FAGA,mIAMJ,qBAAKA,UAAU,sBCYVM,EA5DuB,SAAC,GAMhC,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,aAEA,OACE,qBAAKX,UAAU,SAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,qBAAKY,IAAI,YAAYC,IAAI,SACzB,0DAEF,8BACE,+BACE,6BACE,wBAAQZ,QAAS,kBAAMQ,KAAvB,SACGF,EAAY,OAAS,YAG1B,6BACE,wBAAQN,QAAS,kBAAMS,KAAvB,qBAEF,+BACE,qBAAKV,UAAU,iBACf,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,OAAf,kBACA,uBACEc,SAAUH,EACVI,MAAOP,EACPQ,KAAK,IACLC,KAAK,QACLC,IAAI,IACJC,IAAI,KACJnB,UAAU,WAEZ,qBAAKA,UAAU,QAAf,wBAGJ,6BACE,cAAC,EAAD,MAEF,6BACE,qBAAKA,UAAU,SAAf,SACE,mBACEoB,KAAK,gDACLpB,UAAU,WAFZ,mCCXDqB,G,YAnCmB,SAAC,GAQ5B,IAPLC,EAOI,EAPJA,IACAC,EAMI,EANJA,OACAC,EAKI,EALJA,OACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,UACAC,EACI,EADJA,aAEMC,EAAE,UAAMP,EAAN,aAAcC,GAOtB,OACE,qBACEM,GAAIA,EACJC,cAAA,UAAgBD,GAChB7B,UAREwB,EAAe,YACZ,OAQLvB,QAAS,kBAAMwB,KACfG,aAAc,WACZA,KAEFF,YAAa,WACXA,KAEFC,UAAW,WACTA,SCXOI,EAdS,SAACC,EAAiBV,EAAaC,GACrD,IAAMU,EAAcD,EAAKV,GAAKC,GAC1BU,EAAYT,OACdS,EAAYT,QAAS,EAErBS,EAAYT,QAAS,EAGvB,IADA,IAAIU,EAAU,GACLC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC/BD,EAAQG,KAAKL,EAAKG,IAEpB,OAAOD,GC8CMI,EA3DmB,SAAC,GAAuB,IAArBN,EAAoB,EAApBA,KAAMO,EAAc,EAAdA,QAAc,EACX7C,oBAAkB,GADP,mBAChD8C,EADgD,KAChCC,EADgC,KAsBjDC,EAAQV,EAAKW,KAAI,SAACrB,EAAcsB,GACpC,OAEE,aADA,CACA,OAAK5C,UAAU,MAAqB8B,cAAA,UAAgBc,GAApD,SACGtB,EAAIqB,KAAI,SAACE,EAAaC,GAAsB,IAEnCxB,EAAwBuB,EAAxBvB,IAAKC,EAAmBsB,EAAnBtB,OAAQC,EAAWqB,EAAXrB,OACrB,OACE,cAAC,EAAD,CAEEF,IAAKA,EACLC,OAAQA,EACRC,OAAQA,EACRC,cAAe,kBAjCL,SAACH,EAAaC,GAClC,IAAIW,EAAUH,EAAgBC,EAAMV,EAAKC,GACzCgB,EAAQL,GA+BuBT,CAAcmB,EAAUE,IAC7CnB,UAAW,WAzBrBc,GAAkB,IA0BRf,YAAa,WA7BvBe,GAAkB,IA8BRb,aAAc,YAxBL,SAACN,EAAaC,GAA0B,IACnDC,EAAWQ,EAAKV,GAAKC,GAArBC,OACR,GAAIgB,IAAmBhB,EAAQ,CAC7B,IAAIU,EAAUH,EAAgBC,EAAMV,EAAKC,GACzCgB,EAAQL,IAqBEN,CAAagB,EAAUE,KARpBA,OANaF,MAuB9B,OACE,qBAAK5C,UAAU,OAAf,SACE,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,QAAQ8B,cAAY,aAAnC,SACGY,SCiBIK,G,KAtEa,WAAO,IAAD,EACCrD,oBAAkB,GADnB,mBACzBC,EADyB,KACZC,EADY,KAG1BC,EAAc,SAACC,GACnBA,EAAEC,kBACFH,GAAU,IAEZ,OACE,sBAAKI,UAAU,aAAaC,QAAS,kBAAML,GAAU,IAArD,UACE,sBAAKI,UAAU,iBAAf,UACE,qBAAKY,IAAI,UAAUC,IAAI,QACvB,+CAEF,cAAC,IAAD,CACEX,OAAQP,EACRQ,eAAgBN,EAChBO,MAAOrB,EACPsB,aAAa,gBAJf,SAME,sBAAKL,UAAU,cAAf,UACE,sBAAKA,UAAU,SAAf,UACE,4CACA,8BACE,wBAAQC,QAASJ,EAAjB,oBAGJ,qBAAKG,UAAU,YAAf,SACE,+GAKF,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,cAAf,UACE,0CACA,qBACEY,IAAI,uFACJC,IAAI,cAGR,sBAAKb,UAAU,oBAAf,UACE,2DACA,qBACEY,IAAI,qFACJC,IAAI,+BAGR,sBAAKb,UAAU,oBAAf,UACE,4DACA,qBACEY,IAAI,wEACJC,IAAI,gCAGR,sBAAKb,UAAU,oBAAf,UACE,2DACA,qBACEY,IAAI,qFACJC,IAAI,4CCiBLmC,EA3Ee,WAAO,IAAD,EACDtD,oBAAkB,GADjB,mBAC3BC,EAD2B,KACdC,EADc,KAG5BC,EAAc,SAACC,GACnBA,EAAEC,kBACFH,GAAU,IAEZ,OACE,sBAAKI,UAAU,cAAcC,QAAS,kBAAML,GAAU,IAAtD,UACE,sBAAKI,UAAU,iBAAf,UACE,qBAAKY,IAAI,UAAUC,IAAI,eACvB,gDAEF,cAAC,IAAD,CACEX,OAAQP,EACRQ,eAAgBN,EAChBO,MAAOrB,EACPsB,aAAa,gBAJf,SAME,sBAAKL,UAAU,cAAf,UACE,sBAAKA,UAAU,SAAf,UACE,6CACA,8BACE,wBAAQC,QAASJ,EAAjB,oBAGJ,qBAAKG,UAAU,YAAf,SACE,4HAKF,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,eAAf,UACE,2CACA,qBACEY,IAAI,+EACJC,IAAI,eAGR,sBAAKb,UAAU,YAAf,UACE,wCACA,qBACEY,IAAI,4EACJC,IAAI,YAGR,sBAAKb,UAAU,cAAf,UACE,0CACA,qBACEY,IAAI,8EACJC,IAAI,cAGR,sBAAKb,UAAU,eAAf,UACE,2CACA,qBACEY,IAAI,sEACJC,IAAI,eAGR,sBAAKb,UAAU,aAAf,UACE,mDACA,qBACEY,IAAI,mEACJC,IAAI,yBCGLoC,EApEc,WAAO,IAAD,EACAvD,oBAAkB,GADlB,mBAC1BC,EAD0B,KACbC,EADa,KAG3BC,EAAc,SAACC,GACnBA,EAAEC,kBACFH,GAAU,IAEZ,OACE,sBAAKI,UAAU,aAAaC,QAAS,kBAAML,GAAU,IAArD,UACE,sBAAKI,UAAU,iBAAf,UACE,qBAAKY,IAAI,kBAAkBC,IAAI,gBAC/B,gDAEF,cAAC,IAAD,CACEX,OAAQP,EACRQ,eAAgBN,EAChBO,MAAOrB,EACPsB,aAAa,gBAJf,SAME,sBAAKL,UAAU,cAAf,UACE,sBAAKA,UAAU,SAAf,UACE,6CACA,8BACE,wBAAQC,QAASJ,EAAjB,oBAGJ,qBAAKG,UAAU,YAAf,SACE,8JAKF,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,eAAf,UACE,yCACA,qBACEY,IAAI,4IACJC,IAAI,aAGR,sBAAKb,UAAU,YAAf,UACE,4CACA,qBACEY,IAAI,wHACJC,IAAI,gBAGR,sBAAKb,UAAU,cAAf,UACE,wCACA,qBACEY,IAAI,kHACJC,IAAI,YAGR,sBAAKb,UAAU,eAAf,UACE,0CACA,qBACEY,IAAI,sHACJC,IAAI,0B,MCxDpBqC,IAAMC,cAAc,SAEpB,IAUeC,EAVO,WACpB,OACE,sBAAKpD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QC0BSqD,EAhCW,SAACpB,EAAoBD,GAe7C,IAbA,IAWIsB,EAAQ,EAEZ,MAbmB,CACjB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,IAKP,eAAkC,CAA7B,IAAIC,EAAS,KACVC,EAASvB,EAAYX,IAAMiC,EAAU,GACrCE,EAASxB,EAAYV,OAASgC,EAAU,GAG5CC,GAAU,GACVC,GAAU,GACVD,EAASxB,EAAKI,QACdqB,EAASzB,EAAK,GAAGI,QACjBJ,EAAKwB,GAAQC,GAAQjC,SAErB8B,GAAS,GAGb,OAAOA,GCRMI,EAvBF,SAAC1B,GAEZ,IADA,IAAME,EAAU,GACPC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAAK,CAEpC,IADA,IAAMwB,EAAU,GACPC,EAAI,EAAGA,EAAI5B,EAAK,GAAGI,OAAQwB,IAAK,CACvC,IAAMC,EAAQR,EAAkBrB,EAAKG,GAAGyB,GAAI5B,GACxC8B,EAAI9B,EAAKG,GAAGyB,GAGF,IAAVC,IAA4B,IAAbC,EAAEtC,OACnBsC,EAAI,CAAExC,IAAKa,EAAGZ,OAAQqC,EAAGpC,QAAQ,IACxBqC,EAAQ,GAAKA,EAAQ,KAC9BC,EAAI,CAAExC,IAAKa,EAAGZ,OAAQqC,EAAGpC,QAAQ,IAGnCmC,EAAQtB,KAAKyB,GAEf5B,EAAQG,KAAKsB,GAGf,OAAOzB,GCJM6B,MApBf,SAAoBC,EAAgBC,GAGlC,IAFA,IAAMjC,EAAO,GAEJV,EAAM,EAAGA,EAAM0C,EAAQ1C,IAAO,CAGrC,IAFA,IAAM4C,EAAa,GAEV3C,EAAS,EAAGA,EAAS0C,EAAW1C,IAAU,CACjD,IAAI4C,EAAoB,CACtB7C,IAAKA,EACLC,OAAQA,EACRC,QAAQ,GAEV0C,EAAW7B,KAAK8B,GAElBnC,EAAKK,KAAK6B,GAGZ,OAAOlC,GCRLoC,EAA4C,GAArCC,KAAKC,MAAMC,OAAOC,WAAa,IAAY,EAClDC,EAAyD,GAAlDJ,KAAKC,OAAOC,OAAOG,YAAc,GAAK,IAAM,IAoDxCC,EAlDO,WAAO,IAAD,EACMjF,oBAAkB,GADxB,mBACnBa,EADmB,KACRqE,EADQ,OAEFlF,mBAAoBqE,EAAWU,EAAML,IAFnC,mBAEnBpC,EAFmB,KAEbO,EAFa,OAGA7C,mBAAiB,KAHjB,mBAGnBc,EAHmB,KAGZqE,EAHY,KAMtBC,EAAaC,iBAAOxE,GACxBuE,EAAWE,QAAUzE,EAErB,IAAI0E,EAAWF,iBAAOvE,GACtByE,EAASD,QAAUxE,EAGnB,IAAM0E,EAAaC,uBAAY,WAExBL,EAAWE,UAChBzC,GAAQ,SAAC6C,GAAD,OAAc1B,EAAK0B,MAC3BC,WAAWH,EAAY,GAAKI,SAASL,EAASD,aAC7C,IAiBH,OAJAO,qBAAU,WACJhF,GAAW2E,MACd,CAACA,EAAY3E,IAGd,sBAAKP,UAAU,MAAf,UACE,cAAC,EAAD,CACEO,UAAWA,EACXE,cAhBgB,WACpBmE,GAAW,SAACY,GAAD,OAAgBA,MAgBvB9E,gBAbkB,WACtB6B,EAAQwB,EAAWU,EAAML,KAarBzD,aArBe,SAAC8E,GACpBZ,EAASY,EAAMC,OAAO3E,QAqBlBP,MAAOA,IAET,cAAC,EAAD,IACA,cAAC,EAAD,CAAMwB,KAAMA,EAAMO,QAASA,QC7ClBoD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.793cf927.chunk.js","sourcesContent":["export const customStyles = {\n  content: {\n    top: \"40%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    background: \"linear-gradient(to right, #141e30, #243b55)\",\n    borderRadius: \"20px\",\n  },\n};\n","import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { customStyles } from \"./styles/customStyles\";\nimport \"./RulesButton.css\";\n\nconst RulesButton: React.FC = () => {\n  const [modalIsOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleClose = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"rules\" onClick={() => setIsOpen(true)}>\n      <div className=\"rules-btn\">\n        <p>How To Play</p>\n      </div>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={handleClose}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        <div className=\"rules-modal\">\n          <div className=\"header\">\n            <h2>How To Play</h2>\n            <div>\n              <button onClick={handleClose}>X</button>\n            </div>\n          </div>\n          <div className=\"howto-text\">\n            <h3>Draw</h3>\n            <p>\n              You can click on the board to create live cells. When you have\n              enough press the start button. For more info on possible cells\n              click on <u>Still Lives</u>, <u>Oscillators</u> or{\" \"}\n              <u>Spaceships</u>.\n            </p>\n          </div>\n          <div className=\"rules-text\">\n            <h3>Rules</h3>\n            <ul>\n              <li>Any live cell with two or three live neighbours survives.</li>\n              <li>\n                Any dead cell with three live neighbours becomes a live cell.\n              </li>\n              <li>\n                All other live cells die in the next generation. Similarly, all\n                other dead cells stay dead.\n              </li>\n            </ul>\n          </div>\n          <div className=\"content\"></div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default RulesButton;\n","import React from \"react\";\nimport \"./NavBar.css\";\nimport RulesButton from \"./RulesButton\";\nimport { NavbarProps } from \"../interface/interface\";\n\nconst NavBar: React.FC<NavbarProps> = ({\n  isRunning,\n  speed,\n  handleRunning,\n  handleClearGrid,\n  handleSlider,\n}) => {\n  return (\n    <div className=\"navbar\">\n      <div className=\"container flex\">\n        <div className=\"title flex\">\n          <img src=\"virus.png\" alt=\"cell\"></img>\n          <h2>Conway's Game of Life</h2>\n        </div>\n        <nav>\n          <ul>\n            <li>\n              <button onClick={() => handleRunning()}>\n                {isRunning ? \"Stop\" : \"Start\"}\n              </button>\n            </li>\n            <li>\n              <button onClick={() => handleClearGrid()}>Clear</button>\n            </li>\n            <li>\n              <div className=\"maxSliderVal\"></div>\n              <div className=\"slider\">\n                <div className=\"left\">Fast</div>\n                <input\n                  onChange={handleSlider}\n                  value={speed}\n                  step=\"1\"\n                  type=\"range\"\n                  min=\"1\"\n                  max=\"11\"\n                  className=\"slider\"\n                ></input>\n                <div className=\"right\">Slow</div>\n              </div>\n            </li>\n            <li>\n              <RulesButton />\n            </li>\n            <li>\n              <div className=\"github\">\n                <a\n                  href=\"https://github.com/Atska/Conways-Game-Of-Life\"\n                  className=\"git-link\"\n                >\n                  Github\n                </a>\n              </div>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./Node.css\";\nimport { NodeProps } from \"../interface/interface\";\n\nconst Node: React.FC<NodeProps> = ({\n  row,\n  column,\n  isCell,\n  handleOnClick,\n  onMouseDown,\n  onMouseUp,\n  onMouseEnter,\n}) => {\n  const id = `${row}, ${column}`;\n\n  const className = (): string => {\n    if (isCell) return \"node-cell\";\n    return \"node\";\n  };\n\n  return (\n    <div\n      id={id}\n      data-testid={`${id}`}\n      className={className()}\n      onClick={() => handleOnClick()}\n      onMouseEnter={() => {\n        onMouseEnter();\n      }}\n      onMouseDown={() => {\n        onMouseDown();\n      }}\n      onMouseUp={() => {\n        onMouseUp();\n      }}\n    ></div>\n  );\n};\n\nexport default Node;\n","import { INode } from \"../interface/interface\";\n\n/**\n * Creates a new grid and changes the grid[i][j].isCell in false or true\n * @param grid Matrix of Node objects\n * @param row row location\n * @param column column location\n */\nconst updatedCellGrid = (grid: INode[][], row: number, column: number) => {\n  const currentNode = grid[row][column];\n  if (currentNode.isCell) {\n    currentNode.isCell = false;\n  } else {\n    currentNode.isCell = true;\n  }\n  let newGrid = [];\n  for (let i = 0; i < grid.length; i++) {\n    newGrid.push(grid[i]);\n  }\n  return newGrid;\n};\n\nexport default updatedCellGrid;\n","import React, { useState } from \"react\";\nimport \"./Game.css\";\nimport Node from \"./Node\";\nimport { INode, GameProps } from \"../interface/interface\";\nimport updatedCellGrid from \"../helperFunctions/updatedCellGrid\";\n\nconst Game: React.FC<GameProps> = ({ grid, setGrid }) => {\n  const [MouseIsClicked, setMouseIsClicked] = useState<boolean>(false);\n  const handleOnClick = (row: number, column: number): void => {\n    let newGrid = updatedCellGrid(grid, row, column);\n    setGrid(newGrid);\n  };\n\n  const onMouseDown = (row: number, column: number): void => {\n    setMouseIsClicked(true);\n  };\n  const onMouseUp = (): void => {\n    setMouseIsClicked(false);\n  };\n\n  const onMouseEnter = (row: number, column: number): void => {\n    const { isCell } = grid[row][column];\n    if (MouseIsClicked && !isCell) {\n      let newGrid = updatedCellGrid(grid, row, column);\n      setGrid(newGrid);\n    }\n  };\n\n  const board = grid.map((row: INode[], rowIndex: number) => {\n    return (\n      // each row must be in a div so you can form a field in css\n      <div className=\"Row\" key={rowIndex} data-testid={`${rowIndex}`}>\n        {row.map((node: INode, nodeIndex: number) => {\n          // destructuring node object\n          const { row, column, isCell } = node;\n          return (\n            <Node\n              key={nodeIndex}\n              row={row}\n              column={column}\n              isCell={isCell}\n              handleOnClick={() => handleOnClick(rowIndex, nodeIndex)}\n              onMouseUp={() => onMouseUp()}\n              onMouseDown={() => onMouseDown(rowIndex, nodeIndex)}\n              onMouseEnter={() => {\n                onMouseEnter(rowIndex, nodeIndex);\n              }}\n            />\n          );\n        })}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-container\">\n        <div className=\"board\" data-testid=\"test-board\">\n          {board}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { customStyles } from \"../styles/customStyles\";\nimport \"./mapkeys.css\";\n\nconst Spaceship: React.FC = () => {\n  const [modalIsOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleClose = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    setIsOpen(false);\n  };\n  return (\n    <div className=\"spaceships\" onClick={() => setIsOpen(true)}>\n      <div className=\"spaceships-btn\">\n        <img src=\"ufo.png\" alt=\"ufo\"></img>\n        <h3>Spaceships</h3>\n      </div>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={handleClose}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        <div className=\"space-modal\">\n          <div className=\"header\">\n            <h2>Spaceships</h2>\n            <div>\n              <button onClick={handleClose}>X</button>\n            </div>\n          </div>\n          <div className=\"info-text\">\n            <p>\n              Draw the pattern and you get one of the spaceships. They are\n              moveable cells.\n            </p>\n          </div>\n          <div className=\"content\">\n            <div className=\"glider item\">\n              <h3>Glider: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/f/f2/Game_of_life_animated_glider.gif\"\n                alt=\"glider\"\n              ></img>\n            </div>\n            <div className=\"LW-spaceship item\">\n              <h3>Light- weight spaceship: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/3/37/Game_of_life_animated_LWSS.gif\"\n                alt=\"Light- weight spaceship\"\n              ></img>\n            </div>\n            <div className=\"MW-spaceship item\">\n              <h3>Middle- weight spaceship: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/4/4e/Animated_Mwss.gif\"\n                alt=\"Middle- weight spaceship\"\n              ></img>\n            </div>\n            <div className=\"HW-spaceship item\">\n              <h3>Heavy- weight spaceship: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/3/37/Game_of_life_animated_LWSS.gif\"\n                alt=\"Heavy-\n                  weight\n                  spaceship\"\n              ></img>\n            </div>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Spaceship;\n","import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { customStyles } from \"../styles/customStyles\";\nimport \"./mapkeys.css\";\n\nconst Oscillators: React.FC = () => {\n  const [modalIsOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleClose = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    setIsOpen(false);\n  };\n  return (\n    <div className=\"oscillators\" onClick={() => setIsOpen(true)}>\n      <div className=\"oscillator-btn\">\n        <img src=\"osc.png\" alt=\"oscillator\"></img>\n        <h3>Oscillators</h3>\n      </div>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={handleClose}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        <div className=\"space-modal\">\n          <div className=\"header\">\n            <h2>Oscillators</h2>\n            <div>\n              <button onClick={handleClose}>X</button>\n            </div>\n          </div>\n          <div className=\"info-text\">\n            <p>\n              Draw the pattern and you get one of the oscillators. They are\n              static, yet moveable cells.\n            </p>\n          </div>\n          <div className=\"content\">\n            <div className=\"blinker item\">\n              <h3>Blinker: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/9/95/Game_of_life_blinker.gif\"\n                alt=\"blinker\"\n              ></img>\n            </div>\n            <div className=\"toad item\">\n              <h3>Toad: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/1/12/Game_of_life_toad.gif\"\n                alt=\"toad\"\n              ></img>\n            </div>\n            <div className=\"beacon item\">\n              <h3>Beacon: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/1/1c/Game_of_life_beacon.gif\"\n                alt=\"beacon\"\n              ></img>\n            </div>\n            <div className=\"tripole item\">\n              <h3>Tripole: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/b/bb/2g3_2-laser.gif\"\n                alt=\"tripole\"\n              ></img>\n            </div>\n            <div className=\"penta item\">\n              <h3>Penta-decathlon: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/7/74/Pulsator.gif\"\n                alt=\"penta\"\n              ></img>\n            </div>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Oscillators;\n","import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { customStyles } from \"../styles/customStyles\";\nimport \"./mapkeys.css\";\n\nconst StillLives: React.FC = () => {\n  const [modalIsOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleClose = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    setIsOpen(false);\n  };\n  return (\n    <div className=\"StillLives\" onClick={() => setIsOpen(true)}>\n      <div className=\"StillLives-btn\">\n        <img src=\"still_lives.png\" alt=\"still_lives\"></img>\n        <h3>Still Lives</h3>\n      </div>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={handleClose}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        <div className=\"space-modal\">\n          <div className=\"header\">\n            <h2>Still Lives</h2>\n            <div>\n              <button onClick={handleClose}>X</button>\n            </div>\n          </div>\n          <div className=\"info-text\">\n            <p>\n              Draw the pattern and you get one of the still lives. They are live\n              cells but wont do much unless another cell touches them.\n            </p>\n          </div>\n          <div className=\"content\">\n            <div className=\"blinker item\">\n              <h3>Block: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Game_of_life_block_with_border.svg/132px-Game_of_life_block_with_border.svg.png\"\n                alt=\"block\"\n              ></img>\n            </div>\n            <div className=\"toad item\">\n              <h3>Bee-hive: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Game_of_life_beehive.svg/196px-Game_of_life_beehive.svg.png\"\n                alt=\"bee-hive\"\n              ></img>\n            </div>\n            <div className=\"beacon item\">\n              <h3>Boat: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/Game_of_life_boat.svg/164px-Game_of_life_boat.svg.png\"\n                alt=\"boat\"\n              ></img>\n            </div>\n            <div className=\"tripole item\">\n              <h3>Flower: </h3>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Game_of_life_flower.svg/164px-Game_of_life_flower.svg.png\"\n                alt=\"flower\"\n              ></img>\n            </div>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default StillLives;\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport Spaceship from \"./mapkeys/Spaceship\";\nimport Oscillators from \"./mapkeys/Oscillators\";\nimport StillLives from \"./mapkeys/StillLives\";\nimport \"./Map.css\";\n\nModal.setAppElement(\"#root\");\n\nconst Map: React.FC = () => {\n  return (\n    <div className=\"map\">\n      <StillLives />\n      <Oscillators />\n      <Spaceship />\n    </div>\n  );\n};\n\nexport default Map;\n","import { INode } from \"../interface/interface\";\n\n/**\n * Counts the number of live neighbor cells of current node\n * @param currentNode\n * @param grid\n * @returns number of live cell\n */\nconst liveNeighborCount = (currentNode: INode, grid: INode[][]): number => {\n  // direction of possible neighbors in a grid\n  const directions = [\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, -1],\n    [0, -1],\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n  ];\n\n  let count = 0;\n\n  for (let direction of directions) {\n    const rowIdx = currentNode.row + direction[0];\n    const colIdx = currentNode.column + direction[1];\n\n    if (\n      rowIdx >= 0 &&\n      colIdx >= 0 &&\n      rowIdx < grid.length &&\n      colIdx < grid[0].length &&\n      grid[rowIdx][colIdx].isCell\n    )\n      count += 1;\n  }\n\n  return count;\n};\n\nexport default liveNeighborCount;\n","import { INode } from \"../interface/interface\";\nimport liveNeighborCount from \"./liveNeighborCount\";\n/**\n * Simulation of the game of life\n * @param grid\n */\nconst game = (grid: INode[][]): INode[][] => {\n  const newGrid = [];\n  for (let i = 0; i < grid.length; i++) {\n    const newRows = [];\n    for (let j = 0; j < grid[0].length; j++) {\n      const neigh = liveNeighborCount(grid[i][j], grid);\n      let c = grid[i][j];\n      // 1# rule: Any living cell with less than 2 and more than 3 live neighbors dies\n      // 2# rule: Any dead cell with three live neigh becomes alive\n      if (neigh === 3 && c.isCell === false) {\n        c = { row: i, column: j, isCell: true };\n      } else if (neigh < 2 || neigh > 3) {\n        c = { row: i, column: j, isCell: false };\n      }\n\n      newRows.push(c);\n    }\n    newGrid.push(newRows);\n  }\n\n  return newGrid;\n};\n\nexport default game;\n","import { INode } from \"../interface/interface\";\n\nfunction createGrid(maxRow: number, maxColumn: number): INode[][] {\n  const grid = [];\n\n  for (let row = 0; row < maxRow; row++) {\n    const currentRow = [];\n\n    for (let column = 0; column < maxColumn; column++) {\n      let nodeSchema: INode = {\n        row: row,\n        column: column,\n        isCell: false,\n      };\n      currentRow.push(nodeSchema);\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n}\n\nexport default createGrid;\n","import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport Game from \"./components/Game\";\nimport Map from \"./components/Map\";\nimport game from \"./helperFunctions/game\";\nimport createGrid from \"./helperFunctions/createGrid\";\nimport { INode } from \"./interface/interface\";\n\n// 1440/20(one node is 20px) * 0.9(left and right border 1px; 144/20 and substract it from product)\n// -2( remove two node left and right)\nlet cols = Math.floor(window.innerWidth / 20) * 0.9 - 2;\nlet rows = Math.floor((window.innerHeight - 70 - 80) / 20) * 0.9;\n\nconst App: React.FC = () => {\n  const [isRunning, setRunning] = useState<boolean>(false);\n  const [grid, setGrid] = useState<INode[][]>(createGrid(rows, cols));\n  const [speed, setSpeed] = useState<string>(\"6\");\n\n  //helper ref to tranfer boolean value\n  let runningRef = useRef(isRunning);\n  runningRef.current = isRunning;\n\n  let speedRef = useRef(speed);\n  speedRef.current = speed;\n\n  //useCallback stops recreation of the function\n  const handleGame = useCallback(() => {\n    //break condition\n    if (!runningRef.current) return;\n    setGrid((prevGrid) => game(prevGrid));\n    setTimeout(handleGame, 50 * parseInt(speedRef.current));\n  }, []);\n\n  const handleSlider = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSpeed(event.target.value);\n  };\n  const handleRunning = () => {\n    setRunning((prevValue) => !prevValue);\n  };\n\n  const handleClearGrid = () => {\n    setGrid(createGrid(rows, cols));\n  };\n\n  useEffect(() => {\n    if (isRunning) handleGame();\n  }, [handleGame, isRunning]);\n\n  return (\n    <div className=\"App\">\n      <NavBar\n        isRunning={isRunning}\n        handleRunning={handleRunning}\n        handleClearGrid={handleClearGrid}\n        handleSlider={handleSlider}\n        speed={speed}\n      />\n      <Map />\n      <Game grid={grid} setGrid={setGrid} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}